#!/usr/bin/env python3

import json
import os
import subprocess

vendor_ids = {
    '8086:158b': {'manufacturer': "Intel", 'model': "XXV710", 'sniffer_driver': "i40e"},
    '14c1:0008': {'manufacturer': "Myricom", 'model': "10G-PCIE", 'sniffer_driver': 'snfv3'},
    '1c09:4264': {'manufacturer': "Myricom", 'model': "10G-PCIE3", 'sniffer_driver': 'snfv5'},
    }

def get_pci_ids_by_vendor(vendor_id):
    lspci = subprocess.Popen(['lspci', '-Dd', vendor_id], stdout=subprocess.PIPE)
    pci_ids = subprocess.Popen(['cut', '-f', '1', '-d', " "], stdin=lspci.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    lspci.stdout.close()
    out, err = pci_ids.communicate()
    return [x for x in out.decode('utf-8').strip().split('\n') if x]

def get_iface_by_pci_id(device_id):
    return os.listdir(f"/sys/bus/pci/devices/{device_id}/net")[0]

def get_facts_by_pci_id(device_id, iface):
    data = {}
    with open(f"/sys/bus/pci/devices/{device_id}/net/{iface}/address") as f:
        data['mac'] = f.read().strip()
    try:
        with open(f"/sys/bus/pci/devices/{device_id}/net/{iface}/carrier") as f:
            data['carrier'] = f.read().strip() == '1'
    except OSError:
        pass
    return data

def get_snf_nic_info():
    nic_info = subprocess.Popen(['/opt/snf/bin/myri_nic_info', '--machine'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = nic_info.communicate()
    return [x.split(',') for x in out.decode('utf-8').strip().split('\n') if x]

def get_ethtool_driver_info(interface):
    ethtool = subprocess.Popen(['ethtool', '--driver', interface], stdout=subprocess.PIPE)
    out, err = ethtool.communicate()
    result = {}
    for line in out.decode('utf-8').strip().split('\n'):
        k, v = line.split(':', 1)
        result[k] = v.strip()
    return result

def get_ethtool_port_info(interface):
    ethtool = subprocess.Popen(['ethtool', interface], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = ethtool.communicate()

    simple_vals = ["Duplex", "Speed", "Port", "PHYAD", "Auto-negotiation"]

    result = {}
    for line in out.decode('utf-8').strip().split('\n'):
        line = line.strip()
        for val in simple_vals:
            if line.startswith(f"{val}: "):
                result[val.lower()] = line.split(': ', 1)[1]

    return result

capture_nics = []

snf_info = {}
if os.path.exists("/opt/snf/bin/myri_nic_info"):
    for port, serial, mac, product, driver, version, license in get_snf_nic_info():
        snf_info[mac] = {"port": port, "serial": serial, "product": product,
                           "driver": driver, "version": version, "license": license}

for vendor_id, vendor_data in vendor_ids.items():
    device_ids = get_pci_ids_by_vendor(vendor_id)
    for device_id in device_ids:
        data = {}
        data.update(vendor_data)
        data['pci_id'] = device_id

        iface_name = get_iface_by_pci_id(device_id)
        data['iface'] = iface_name

        facts = get_facts_by_pci_id(device_id, iface_name)
        data.update(facts)

        if vendor_data['manufacturer'] == "Intel":
            data.update(get_ethtool_driver_info(iface_name))
            data.update(get_ethtool_port_info(iface_name))

        elif data['mac'] in snf_info:
            data['snf_port'] = snf_info[data['mac']]['port']
            data['serial'] = snf_info[data['mac']]['serial']
            data['product'] = snf_info[data['mac']]['product']
            data['license_status'] = snf_info[data['mac']]['license']
            data['version'] = snf_info[data['mac']]['version']

        capture_nics.append(data)

print(json.dumps(capture_nics))
